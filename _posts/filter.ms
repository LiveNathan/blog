How many filters is too many?

This past week I worked on medium sized show where for the first time I had access to a way to not only generate many EQ filters quickly, but then also deploy them to my output processor quickly as well. This raised the question for me, how many filters is too many?

Previously I had tried to follow the L'Acoustics heuristic of limiting myself to one EQ filter per measurement. So if I take 8 measurements of a zone, then I can use 8 filters. This helps to stop me from obsessing about any one issue for too long, stops me from using overly narrow filters, becuase if I only have a limited number of them then I'm forced to focus on only the biggest problems. This for many years has become best practice in my own work and teaching in pro audio. Use few wider filters. Don't obsess. Zoom out and get the target shape, not every tiny nook and cranny. Another important reason to follow this heuristic is to be efficient with time. Time is always limited in live event production and 12 filters will take twice as long to insert as 6 filters. It's more important to hit all of the zones that your PA touches and check for any issues than to get the perfect filter for every zone. You will be sad if you spend an hour perfecting the filters fo a single zone, then run out of time just as you discover that another zone has almost no HF due to an obstruction or mechanical problem with the speaker and you should have been spending your time on that major issue instead of the minor ones.

The along comes the temptation of automation. In apps like REW and CrossLite we now have fairly sofisticated auto EQ. In 1 second it can insert 24 filters, not only is that faster than I can insert them, but in some cases it might even make better choices than me. Similar to how SubAligner considers every possible combination of delay and polarity, auto EQ can consider every possible combination of frequency, gain, and width. Plus, it can take into account group delay and other factors and I typically never look at. If you're a purist then you hate this idea because EQ should be none or minimal, but if you're a pragmatist and you just need to get shit done then you love this. When CrossLite added its auto EQ feature I immediately started using it on every show. It doesnt always produce the results I want, but it's easy and quick to try and most times gets me to a better starting point than without it. Even with this feature, I still limited myself to 1 filter per measurement due to all of the reason I have already described but probably most importantly is that then afterwards each and every one of those filters must be manually transfered by hand from CrossLite to my output processor. I knew this was a bottleneck so for this most recent show in NYC I decided to build a little CLI app to help automate this process.

CrossLite doesn't have an API, yet, but it can output a filter coeficients text file and d&b ArrayCalc can import a text file in xml format for its EQ settings. So all I had to do was figure out how to convert between the two different files. In the end, it turned out that that part was the easy part. The hard part was figuring out how to read in a windows file path with backslashes. For some reason that I still don't fully understand [this is where I should do more research and find out exactly why this is the way it is] the Spring framework that I used automatically removed all backslashes in all string parameters. It's...infuriating. Why does Spring hate Windows? I dont know. I needed a workaround. First I tried refactoring the app to interactive mode. This is a nice feature that makes a better user experience by allowing you to step threw the app's inputs more like filling out a web form instead of needing to put all of the params into the command. It's the difference between `crosslite-r1-eq -i my-file-name.txt -o my-output-file-name.rpd` and `crosslite-r1-eq`

What is the input file path?
my-file-name.txt

What is the output file path?
my-output-file-name.rpd

Unfortunately, the interactive mode did not work in my Windows 10. The only workaround I could think of is to ask users to first navigate to the folder containing the CrossLite file and then call crosslite-r1-eq on the file name instead of the full path. It's annoying and I wish I knew a better solution, but it works. All of this would be easier as a web app, but then you would need an internet connection to run it, which is uncommon for a production audio network. I suppose I could build a desktop app that emmulates a web app the same way I did for Console Whisperer. In fact, if there's any interest in this app then that's what I'll probably do to make it easier for everyone.

Another problem I discovered will trying to make a video about the app yesterday is that Windows Defender will immediately delete the crosslite-r1-eq.exe file after you download it. I hade to add my Downloads folder to the exclusions list in Windows Defender. Seems like the wrong solution.

tl;dr: I thought it would be easier to build this as a standalone CLI app, but that was naive. I was still able to use it in a production setting and prove that it works, so if there's any interest in this app from more people than just me then I'll consider either building the functionality into Console Whisperer or building a desktop app version of it.